[   ["assertEqual",     { getText (configFile >> "nested_tests" >> "node") }, "0"],
    ["assertEqual",     { getText (configFile / "nested_tests" / "nested1" / "node") }, "1"],
    ["assertEqual",     { getText ((((configFile / "nested_tests") >> "nested1") / "nested2") >> "node") }, "2"],
    ["assertEqual",     { getText ((((((configFile / "nested_tests") >> "nested1") / "nested2") >> "nested3") / "nested4") >> "node") }, "4"],
    ["assertEqual",     { getArray (configFile / "type_tests" / "type_array") }, [1, "test", [1, 2, 3]]],
    ["assertEqual",     { getArray (configFile / "type_tests" / "type_anytext_array") }, ["any", "fancy", "text", "should", "be", "accepted"]],
    ["assertEqual",     { getText (configFile / "type_tests" / "type_string") }, "test"],
    ["assertEqual",     { getText (configFile / "type_tests" / "type_anytext") }, "any fancy text should be accepted"],
    ["assertEqual",     { getNumber (configFile / "type_tests" / "type_scalar") }, 1],
    ["assertTrue",      { isArray (configFile / "type_tests" / "type_array") }],
    ["assertTrue",      { isArray (configFile / "type_tests" / "type_anytext_array") }],
    ["assertFalse",     { isArray (configFile / "type_tests" / "type_string") }],
    ["assertFalse",     { isArray (configFile / "type_tests" / "type_anytext") }],
    ["assertFalse",     { isArray (configFile / "type_tests" / "type_scalar") }],
    ["assertFalse",     { isArray (configFile / "type_tests" / "type_class") }],
    ["assertFalse",     { isText (configFile / "type_tests" / "type_array") }],
    ["assertFalse",     { isText (configFile / "type_tests" / "type_anytext_array") }],
    ["assertTrue",      { isText (configFile / "type_tests" / "type_string") }],
    ["assertTrue",      { isText (configFile / "type_tests" / "type_anytext") }],
    ["assertFalse",     { isText (configFile / "type_tests" / "type_scalar") }],
    ["assertFalse",     { isText (configFile / "type_tests" / "type_class") }],
    ["assertFalse",     { isNumber (configFile / "type_tests" / "type_array") }],
    ["assertFalse",     { isNumber (configFile / "type_tests" / "type_anytext_array") }],
    ["assertFalse",     { isNumber (configFile / "type_tests" / "type_string") }],
    ["assertFalse",     { isNumber (configFile / "type_tests" / "type_anytext") }],
    ["assertTrue",      { isNumber (configFile / "type_tests" / "type_scalar") }],
    ["assertFalse",     { isNumber (configFile / "type_tests" / "type_class") }],
    ["assertFalse",     { isClass (configFile / "type_tests" / "type_array") }],
    ["assertFalse",     { isClass (configFile / "type_tests" / "type_anytext_array") }],
    ["assertFalse",     { isClass (configFile / "type_tests" / "type_string") }],
    ["assertFalse",     { isClass (configFile / "type_tests" / "type_anytext") }],
    ["assertFalse",     { isClass (configFile / "type_tests" / "type_scalar") }],
    ["assertTrue",      { isClass (configFile / "type_tests" / "type_class") }],
    ["assertFalse",     { isText configNull }],
    ["assertFalse",     { isText (configFile >> "doesNotExist") }],
    ["assertFalse",     { isArray configNull }],
    ["assertFalse",     { isArray (configFile >> "doesNotExist") }],
    ["assertFalse",     { isNumber configNull }],
    ["assertFalse",     { isNumber (configFile >> "doesNotExist") }],
    ["assertFalse",     { isClass configNull }],
    ["assertFalse",     { isClass (configFile >> "doesNotExist") }],
    ["assertEqual",     { getArray configNull }, []],
    ["assertEqual",     { getArray (configFile >> "doesNotExist") }, []],
    ["assertEqual",     { getNumber configNull }, 0],
    ["assertEqual",     { getNumber (configFile >> "doesNotExist") }, 0],
    ["assertEqual",     { getText configNull }, ""],
    ["assertEqual",     { getText (configFile >> "doesNotExist") }, ""],
    ["assertTrue",      { isNull configNull }],
    ["assertTrue",      { isNull (configFile >> "doesNotExist" >> "anything") }],
    ["assertTrue",      { !isClass (configFile >> "doesNotExist" >> "anything") }],
    ["assertTrue",      { isNull (configFile / "doesNotExist" / "anything") }],
    ["assertTrue",      { !isClass (configFile / "doesNotExist" / "anything") }],
    ["assertEqual",     { count ("true" configClasses (configFile >> "flat_tests")) }, 5],
    ["assertEqual",     { ("getNumber (_x >> 'key') == 2" configClasses (configFile >> "flat_tests")) }, [configFile >> "flat_tests" >> "B"]],
    ["assertEqual",     { ("getNumber (_x >> 'key') == 5" configClasses (configFile >> "flat_tests")) }, [configFile >> "flat_tests" >> "E"]],
    ["assertEqual",     { ("(getNumber (_x >> 'key')) % 2 == 0" configClasses (configFile >> "flat_tests")) }, [configFile >> "flat_tests" >> "B", configFile >> "flat_tests" >> "D"]],
    ["assertEqual",     { configName ((configFile >> "test_select_selects_addon") select 0) }, "addon"],
    ["assertEqual",     { ("true" configClasses (configFile >> "test_config_classes_only_returns_config_entries")) apply { configName _x } }, ["TestSub"]],
    ["assertEqual",     { ("true" configClasses (configFile >> "nested_tests")) apply { configName _x } }, ["nested1"]],
    ["assertEqual",     { ("true" configClasses (configFile >> "nested_tests" >> "nested1")) apply { configName _x } }, ["nested2"]]
]
